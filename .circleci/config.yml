version: 2.1

orbs:
  node: circleci/node@5.1.0
  python: circleci/python@2.1.1
  aws-cli: circleci/aws-cli@4.1.3

jobs:
  test:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          name: Install uv
          command: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> $BASH_ENV
      - run:
          name: Install dependencies
          command: |
            uv sync --group dev
      - run:
          name: Validate Server JSON Files
          command: |
            # Validate all server JSON files against schema using uv environment
            source .venv/bin/activate
            for file in mcp-registry/servers/*.json; do
              echo "Validating $file"
              python -c "
            import json
            import jsonschema
            
            with open('mcp-registry/schema/server-schema.json') as schema_file:
                schema = json.load(schema_file)
            
            with open('$file') as data_file:
                data = json.load(data_file)
            
            jsonschema.validate(data, schema)
            print('âœ“ Valid')
            "
            done
      - run:
          name: Run tests
          command: |
            source .venv/bin/activate
            pytest
      - run:
          name: Check code style with ruff
          command: |
            source .venv/bin/activate
            ruff check src/ tests/

  deploy:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          name: Install uv
          command: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> $BASH_ENV
      - run:
          name: Install Python dependencies
          command: |
            uv sync --group dev
      - run:
          name: Run preparation script
          command: |
            chmod +x ./scripts/prepare.sh
            source .venv/bin/activate
            ./scripts/prepare.sh ./output
      - aws-cli/setup
      - run:
          name: Upload servers.json to S3
          command: |
            aws s3 cp ./output/api/servers.json s3://aitools.eilat.melioservices.com/mcpm/servers.json --content-type "application/json"
      - run:
          name: Upload install script to S3
          command: |
            aws s3 cp ./pages/install.sh s3://aitools.eilat.melioservices.com/mcpm/install.sh --content-type "text/plain"
      - run:
          name: Upload clone-install-run script to S3
          command: |
            aws s3 cp ./pages/clone-install-run.sh s3://aitools.eilat.melioservices.com/mcpm/clone-install-run.sh --content-type "text/plain"
      - run:
          name: Invalidate CloudFront cache
          command: |
            aws cloudfront create-invalidation --distribution-id ELOOQ9B288JB8 --paths "/mcpm/servers.json" "/mcpm/install.sh" "/mcpm/clone-install-run.sh"

workflows:
  test-and-deploy:
    jobs:
      - test
      - deploy:
          context: melio-eilat
          requires:
            - test
          filters:
            branches:
              only: melio
